from __future__ import annotations
from typing import List, Callable
from time import perf_counter
import numpy as np

DEFAULT_UNSORTED_LIST = [1, 4, 2, 9, 10, 8, 19, 11, 5, 100, 7, 6, 0, 10, 10, 10]
DEFAULT_UNSORTED_LIST_LONG = [7754, 2860, 8408, 1338, 3678, 1687, 8772, 2395, 6545, 1664, 6301,4331, 8388, 5501, 8239, 3825, 1441, 9427, 7374,  422, 1654, 1557,351, 3891, 2156, 6151, 8925, 6510, 4717, 5271, 3977, 7408, 7998,6009, 5057, 5852, 4855, 4875, 3131, 3981, 3284, 1829, 4166, 6424,7731, 9270, 9447, 1309, 2994, 6185, 5467, 6581, 7199, 6113, 4543,9367, 1093, 8897, 1067, 7288, 5852, 9037, 1020, 5349,  258, 5631,3399, 5808, 8637, 8462, 9713, 9537, 8376, 5633, 1989, 4033, 9726,4047, 8803, 9042, 7690, 4634, 1453, 2653, 8237,  516, 7519, 9888,8987, 2660, 4862, 9042, 2980, 1325, 8146, 7414, 1273,  528, 3020,3260, 8387,  191, 8777, 6855, 3004, 8537, 9048,  101, 5292, 3835,7548,  981,  197, 2056, 6415, 8175, 4576, 5000, 9120, 7657, 6807,91, 3551,  351, 8882, 6469, 1495, 3269, 5256, 5076, 2203, 5596,4130, 2374, 6265, 5439, 2136, 7507, 7970, 1137, 6085, 5282, 7382,364, 5212, 1264, 9835, 6900, 8675, 5687, 6251, 3834, 7997, 5933,7969, 4438, 5777, 5443, 6355, 9559, 7573, 9268, 9186, 8010, 6372,4355, 2477, 5181, 1203,   61, 1514, 2594, 2743, 7284, 6050, 8442,7838, 5703,   53, 7857, 8028, 2460, 7468, 8788, 4971, 4156, 3662,3725, 1655,  885, 8604, 4666, 8098, 3406, 6652,  557, 6538, 6461,602,  206, 7511, 3028, 5035, 5248, 3321, 6400, 5728, 5389, 3807,5081, 7677, 7693, 4425,  921, 7657,  151, 1276, 9274, 4350, 8408,3843, 8507, 3618, 3334, 6954, 1007, 2506, 9771, 2199, 7805, 2562,7081, 8675, 1121, 2858, 2345, 4807, 8762, 8252, 9349, 7060, 5390,8593, 8912, 5266, 8284,  648, 7815, 6760, 5871, 9223, 2642, 2246,382,  545, 2309, 8701, 1328, 7331, 2571, 4555, 6685, 2800, 3832,9435,  372, 1893, 9480, 9784, 5049, 4407,  575, 2122, 9132, 4103,7586, 2539, 4487, 6329, 9864, 7771, 4903, 6842, 9784, 6856, 3850,7316, 3936, 8786, 3497, 9491, 6452, 2692, 3995,  316, 3589, 1202,1040, 7361, 1601, 1481, 7705, 4350, 3573, 9531, 4421, 2711,  346,2351, 9361, 2149, 2570, 1882, 7357,  244, 6073,  751, 3105, 4904,2766, 2343, 2776,  676, 2969, 8446, 7874, 4450, 1983,  945, 4965,4679, 8878, 9420, 6138, 6021, 6791, 5310, 1379, 3843, 6022, 1052,1051, 2854, 3384,  902, 4547, 8634, 7324, 9756, 9637, 5681, 2096,6783, 5059, 7692, 8589, 3852, 1014, 8378, 2522,  874,  825, 7904,7614, 2966, 5111, 9598, 8160, 4086, 8659, 3013, 7226, 8309, 6971,2652,  888, 5332, 9970, 4638, 1200, 2139, 1816, 3271, 6090, 2322,8427, 6243, 7947, 8239, 5294, 5751, 3066, 7935,   38, 7421, 1353,1071, 5103, 4684, 5887, 5460,  675, 4018, 6876, 5664,  947, 2380,4478, 4996, 8082, 5768, 3388, 5535, 6723, 6294, 9608, 8609, 9989,7598, 5156, 7683, 2274, 3895, 6812, 4758, 6797, 5415, 7778, 8709,1173, 2989, 3176, 5899, 1554, 8334, 4357, 3829, 7294, 9986, 9938,1492, 4289, 8952, 3866, 4126, 1328, 8444, 8857, 2500,   95, 4975,1843, 5266, 8514, 1473, 1710, 1603, 3221, 6227,    4, 1018, 9731,7950, 3861, 8720, 3481, 2334, 4150, 4989, 6950, 1971,  145, 6020,6013, 7325, 9801, 1112, 9324,  581, 7289, 7496, 9606, 3024, 9585,6978, 1245, 7888, 7566, 1809, 4961, 1536, 4913,  635, 8362, 6135,1, 4207, 2944, 6163,   38, 4150, 1028, 2698, 6213, 2202, 4249,4374, 4169,  529, 3506, 9523, 5365, 7214,  451, 4053, 4484, 5959,2583, 1980, 5815, 4291, 2384, 5785, 6777, 4058, 7370, 9566, 8512,4539, 4926, 9155, 1625, 9558, 1900, 5533, 7116, 2599, 9066, 4942,4722, 6571, 2770, 5274, 6022, 2507, 9129, 5697, 6281, 7851, 2464,8226, 6329, 1705, 7479, 1776, 7555, 9428, 4049, 8945, 5226, 7769,2251, 9454, 8052, 6961, 6129,   33,  526, 7842, 2983, 5644, 3475,4820, 1536,  651, 7612, 8315, 6822, 7883,  783, 1661, 1793,  670,6905, 7086, 8776, 3044, 6135, 8019,  435, 5659, 6686, 6042, 8251,8669, 7784, 4871, 4475, 9602, 9809, 7521, 4470, 8102, 9706, 5977,3939, 9765, 2177, 4822, 3807, 4780, 1387, 9411, 7763, 3509, 8873,6287, 9737, 8318,  487, 9134, 5186, 4900, 5136, 9887, 1501, 4297,6268, 7441, 9687, 6789, 8858, 2370, 7702, 4738, 2006, 3594, 4078,9627, 1085, 8250, 5104, 1314, 8940, 4572, 6690, 8137, 2452, 7871,744, 7191, 3388, 5432, 9474, 1722, 2611, 5260, 8181, 4945, 4013,1754, 7033, 2152, 3237, 2752, 8719,  208, 3808, 1805, 8657, 6157,1961, 2769, 4027, 6802, 3129, 7943, 6329, 7482, 3049, 9465, 9916,8934, 1716, 3638, 5871, 4131, 9688, 9751, 8505, 7074, 2908, 7218,3533, 8204, 9043, 3459, 3732, 1997,  325,  940, 7029, 6242,  433,1103, 9638, 3531, 6267,  171, 4165, 2614,  536, 3630, 3200, 3764,8881, 2702, 1655, 9196, 9281, 2347, 6790, 4308, 1158, 6435, 7365,7425,  848, 2613, 1037, 9809, 8412, 3519, 9948, 4537, 7380, 9164,2158, 2214, 2185, 4590, 9430, 9537, 6931, 6167, 9404, 2178, 2864,1322, 7961, 3347, 2409,  214, 8884, 8880, 5992, 5454,  858, 1464,4986, 7449, 1161, 7319, 9367,  773, 2571, 9652, 8755, 4174, 4468,4379, 7478, 6685, 5430, 9992, 6931, 2370, 7996, 7543, 1846, 6004,2873, 4514, 6662, 1076,  462, 7795, 3532, 7468, 8657, 4191, 9693,9662, 8483, 6784,  669,  533, 3669,  444, 7063, 8059, 9729, 2275,3701, 1415, 8003, 1186, 3937, 1522, 8273, 9420, 3154, 7140, 3948,8050, 6411, 3982, 6763, 1551, 4702, 5361, 7976, 2279,  742,  969,3491, 8699, 6118, 5791, 8722, 9330, 7733, 7036, 4016, 5076, 7952,9228, 2911, 1189,  388,  645, 5430, 4777, 2977, 6717, 6301, 4509,8195, 3056, 3701, 3362,  745, 2189, 2585,  966, 7803, 4694, 4545,5996, 1228, 3007, 9264,   71, 1855, 7276, 3211, 7595, 3020, 5176,1020, 5718, 5799, 1362, 1554, 7160, 1787,  715, 2996, 5757, 6930,319, 8471, 2276, 8079, 9072, 8124, 2647, 4604, 3446, 2374, 5526,1214, 8463, 5427, 2931,  296, 1795, 5960, 6212, 4800, 9999, 8289,2392,  247, 1394, 2769, 4118,  853, 7691, 6479, 5567, 8700, 8082,8368, 7455, 9260, 6125, 6697, 9601, 1553, 1081, 9299, 2170, 3167,8314, 5807, 7912, 7659, 9403, 1991, 8108, 6068, 6011, 9603, 7491,5659,  472, 6026, 5187, 1991, 2748, 9501,  252, 7820, 7740, 5571,4023, 8575, 6804, 7351, 6068, 9280, 3074, 6071, 8548, 2154, 8673,1580, 4269,  164,  547, 4840, 1647, 6217, 1348, 2506, 9485, 6075,8920, 7680,  679, 5205, 1168, 8869, 3962]
# len = 975


# testing functions
def test_versions(versions: List[Callable], lst: List[int]=None, prnt: bool=False) -> None:
    """Wrapper for _test_versions for default benchmarking purposes"""
    print("Testing versions")

    if lst:
        lsts = [lst]
    else:
        lsts = [DEFAULT_UNSORTED_LIST[:], DEFAULT_UNSORTED_LIST_LONG[:]]
        lsts += [sorted(l)[::-1] for l in lsts]

    _test_versions(versions, lsts, prnt)
    print()


def _test_versions(versions: List[Callable], lsts: List[List[int]], prnt: bool) -> None:
    """Test validity of any # of implementations of a sorting algo"""
    for version in versions:
        if all(_test(version, lst, prnt) for lst in lsts):
            print(f"\t{str(version).split()[1]}: Valid")
        else:
            print(f"\t{str(version).split()[1]}: Invalid")


def _test(version: Callable, lst: List[int], prnt: bool) -> bool:
    """Test validity of an implementation of a sorting algo against a list"""
    return_val = version(lst, prnt) # assume test will be sorted in place
    if return_val: # for when the version returns a sorted copy
        return return_val == sorted(lst)
    return lst == sorted(lst)


# timing functions
def time_versions(versions: List[Callable], lst: List[int]=None) -> None:
    """Wrapper for _time_versions for default benchmarking purposes"""
    print("Timing versions")

    if lst:
        _time_versions(versions, lst)
    else:
        print('\tshort')
        _time_versions(versions, DEFAULT_UNSORTED_LIST)
        print('\n\tlong')
        _time_versions(versions, DEFAULT_UNSORTED_LIST_LONG)


def _time_versions(versions: List[Callable], lst: List[int]) -> None:
    """Time any # of implementations of a sorting algo"""
    for version in versions:
        start = perf_counter()
        for _ in range(1000): # might make this a parameter
            version(lst[:], False)
        end = perf_counter()

        time = end - start
        m = 1
        s = 's'
        if time < 1:
            m = 1000
            s = 'Âµs'

        print(f"\t{str(version).split()[1]}: {(time) * m:.3f} {s}")
